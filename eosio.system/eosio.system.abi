{
  "version": "eosio::abi/1.0",
  "types": [
    {
      "new_type_name": "account_name",
      "type": "name"
    },
    {
      "new_type_name": "permission_name",
      "type": "name"
    },
    {
      "new_type_name": "action_name",
      "type": "name"
    },
    {
      "new_type_name": "transaction_id_type",
      "type": "checksum256"
    },
    {
      "new_type_name": "weight_type",
      "type": "uint16"
    }
  ],
  "____comment": "eosio.bios structs: set_account_limits, setpriv, set_global_limits, producer_key, set_producers, require_auth are provided so abi available for deserialization in future.",
  "structs": [
    {
      "name": "permission_level",
      "base": "",
      "fields": [
        {
          "name": "actor",
          "type": "account_name"
        },
        {
          "name": "permission",
          "type": "permission_name"
        }
      ]
    },
    {
      "name": "key_weight",
      "base": "",
      "fields": [
        {
          "name": "key",
          "type": "public_key"
        },
        {
          "name": "weight",
          "type": "weight_type"
        }
      ]
    },
    {
      "name": "bidname",
      "base": "",
      "fields": [
        {
          "name": "bidder",
          "type": "account_name"
        },
        {
          "name": "newname",
          "type": "account_name"
        },
        {
          "name": "bid",
          "type": "asset"
        }
      ]
    },
    {
      "name": "permission_level_weight",
      "base": "",
      "fields": [
        {
          "name": "permission",
          "type": "permission_level"
        },
        {
          "name": "weight",
          "type": "weight_type"
        }
      ]
    },
    {
      "name": "wait_weight",
      "base": "",
      "fields": [
        {
          "name": "wait_sec",
          "type": "uint32"
        },
        {
          "name": "weight",
          "type": "weight_type"
        }
      ]
    },
    {
      "name": "authority",
      "base": "",
      "fields": [
        {
          "name": "threshold",
          "type": "uint32"
        },
        {
          "name": "keys",
          "type": "key_weight[]"
        },
        {
          "name": "accounts",
          "type": "permission_level_weight[]"
        },
        {
          "name": "waits",
          "type": "wait_weight[]"
        }
      ]
    },
    {
      "name": "newaccount",
      "base": "",
      "fields": [
        {
          "name": "creator",
          "type": "account_name"
        },
        {
          "name": "name",
          "type": "account_name"
        },
        {
          "name": "owner",
          "type": "authority"
        },
        {
          "name": "active",
          "type": "authority"
        }
      ]
    },
    {
      "name": "setcode",
      "base": "",
      "fields": [
        {
          "name": "account",
          "type": "account_name"
        },
        {
          "name": "vmtype",
          "type": "uint8"
        },
        {
          "name": "vmversion",
          "type": "uint8"
        },
        {
          "name": "code",
          "type": "bytes"
        }
      ]
    },
    {
      "name": "setabi",
      "base": "",
      "fields": [
        {
          "name": "account",
          "type": "account_name"
        },
        {
          "name": "abi",
          "type": "bytes"
        }
      ]
    },
    {
      "name": "updateauth",
      "base": "",
      "fields": [
        {
          "name": "account",
          "type": "account_name"
        },
        {
          "name": "permission",
          "type": "permission_name"
        },
        {
          "name": "parent",
          "type": "permission_name"
        },
        {
          "name": "auth",
          "type": "authority"
        }
      ]
    },
    {
      "name": "deleteauth",
      "base": "",
      "fields": [
        {
          "name": "account",
          "type": "account_name"
        },
        {
          "name": "permission",
          "type": "permission_name"
        }
      ]
    },
    {
      "name": "linkauth",
      "base": "",
      "fields": [
        {
          "name": "account",
          "type": "account_name"
        },
        {
          "name": "code",
          "type": "account_name"
        },
        {
          "name": "type",
          "type": "action_name"
        },
        {
          "name": "requirement",
          "type": "permission_name"
        }
      ]
    },
    {
      "name": "unlinkauth",
      "base": "",
      "fields": [
        {
          "name": "account",
          "type": "account_name"
        },
        {
          "name": "code",
          "type": "account_name"
        },
        {
          "name": "type",
          "type": "action_name"
        }
      ]
    },
    {
      "name": "canceldelay",
      "base": "",
      "fields": [
        {
          "name": "canceling_auth",
          "type": "permission_level"
        },
        {
          "name": "trx_id",
          "type": "transaction_id_type"
        }
      ]
    },
    {
      "name": "onerror",
      "base": "",
      "fields": [
        {
          "name": "sender_id",
          "type": "uint128"
        },
        {
          "name": "sent_trx",
          "type": "bytes"
        }
      ]
    },
    {
      "name": "buyrambytes",
      "base": "",
      "fields": [
        {
          "name": "payer",
          "type": "account_name"
        },
        {
          "name": "receiver",
          "type": "account_name"
        },
        {
          "name": "bytes",
          "type": "uint32"
        }
      ]
    },
    {
      "name": "sellram",
      "base": "",
      "fields": [
        {
          "name": "account",
          "type": "account_name"
        },
        {
          "name": "bytes",
          "type": "uint64"
        }
      ]
    },
    {
      "name": "buyram",
      "base": "",
      "fields": [
        {
          "name": "payer",
          "type": "account_name"
        },
        {
          "name": "receiver",
          "type": "account_name"
        },
        {
          "name": "quant",
          "type": "asset"
        }
      ]
    },
    {
      "name": "delegatebw",
      "base": "",
      "fields": [
        {
          "name": "from",
          "type": "account_name"
        },
        {
          "name": "receiver",
          "type": "account_name"
        },
        {
          "name": "stake_net_quantity",
          "type": "asset"
        },
        {
          "name": "stake_cpu_quantity",
          "type": "asset"
        },
        {
          "name": "transfer",
          "type": "bool"
        }
      ]
    },
    {
      "name": "undelegatebw",
      "base": "",
      "fields": [
        {
          "name": "from",
          "type": "account_name"
        },
        {
          "name": "receiver",
          "type": "account_name"
        },
        {
          "name": "unstake_net_quantity",
          "type": "asset"
        },
        {
          "name": "unstake_cpu_quantity",
          "type": "asset"
        }
      ]
    },
    {
      "name": "refund",
      "base": "",
      "fields": [
        {
          "name": "owner",
          "type": "account_name"
        }
      ]
    },
    {
      "name": "delegated_bandwidth",
      "base": "",
      "fields": [
        {
          "name": "from",
          "type": "account_name"
        },
        {
          "name": "to",
          "type": "account_name"
        },
        {
          "name": "net_weight",
          "type": "asset"
        },
        {
          "name": "cpu_weight",
          "type": "asset"
        }
      ]
    },
    {
      "name": "user_resources",
      "base": "",
      "fields": [
        {
          "name": "owner",
          "type": "account_name"
        },
        {
          "name": "net_weight",
          "type": "asset"
        },
        {
          "name": "cpu_weight",
          "type": "asset"
        },
        {
          "name": "ram_bytes",
          "type": "uint64"
        }
      ]
    },
    {
      "name": "total_resources",
      "base": "",
      "fields": [
        {
          "name": "owner",
          "type": "account_name"
        },
        {
          "name": "net_weight",
          "type": "asset"
        },
        {
          "name": "cpu_weight",
          "type": "asset"
        },
        {
          "name": "ram_bytes",
          "type": "uint64"
        }
      ]
    },
    {
      "name": "refund_request",
      "base": "",
      "fields": [
        {
          "name": "owner",
          "type": "account_name"
        },
        {
          "name": "request_time",
          "type": "time_point_sec"
        },
        {
          "name": "net_amount",
          "type": "asset"
        },
        {
          "name": "cpu_amount",
          "type": "asset"
        }
      ]
    },
    {
      "name": "blockchain_parameters",
      "base": "",
      "fields": [
        {
          "name": "max_block_net_usage",
          "type": "uint64"
        },
        {
          "name": "target_block_net_usage_pct",
          "type": "uint32"
        },
        {
          "name": "max_transaction_net_usage",
          "type": "uint32"
        },
        {
          "name": "base_per_transaction_net_usage",
          "type": "uint32"
        },
        {
          "name": "net_usage_leeway",
          "type": "uint32"
        },
        {
          "name": "context_free_discount_net_usage_num",
          "type": "uint32"
        },
        {
          "name": "context_free_discount_net_usage_den",
          "type": "uint32"
        },
        {
          "name": "max_block_cpu_usage",
          "type": "uint32"
        },
        {
          "name": "target_block_cpu_usage_pct",
          "type": "uint32"
        },
        {
          "name": "max_transaction_cpu_usage",
          "type": "uint32"
        },
        {
          "name": "min_transaction_cpu_usage",
          "type": "uint32"
        },
        {
          "name": "max_transaction_lifetime",
          "type": "uint32"
        },
        {
          "name": "deferred_trx_expiration_window",
          "type": "uint32"
        },
        {
          "name": "max_transaction_delay",
          "type": "uint32"
        },
        {
          "name": "max_inline_action_size",
          "type": "uint32"
        },
        {
          "name": "max_inline_action_depth",
          "type": "uint16"
        },
        {
          "name": "max_authority_depth",
          "type": "uint16"
        }
      ]
    },
    {
      "name": "eosio_global_state",
      "base": "blockchain_parameters",
      "fields": [
        {
          "name": "max_ram_size",
          "type": "uint64"
        },
        {
          "name": "total_ram_bytes_reserved",
          "type": "uint64"
        },
        {
          "name": "total_ram_stake",
          "type": "int64"
        },
        {
          "name": "last_producer_schedule_update",
          "type": "block_timestamp_type"
        },
        {
          "name": "last_pervote_bucket_fill",
          "type": "uint64"
        },
        {
          "name": "pervote_bucket",
          "type": "int64"
        },
        {
          "name": "perblock_bucket",
          "type": "int64"
        },
        {
          "name": "total_unpaid_blocks",
          "type": "uint32"
        },
        {
          "name": "total_activated_stake",
          "type": "int64"
        },
        {
          "name": "thresh_activated_stake_time",
          "type": "uint64"
        },
        {
          "name": "last_producer_schedule_size",
          "type": "uint16"
        },
        {
          "name": "total_producer_vote_weight",
          "type": "float64"
        },
        {
          "name": "last_name_close",
          "type": "block_timestamp_type"
        }
      ]
    },
    {
      "name": "producer_info",
      "base": "",
      "fields": [
        {
          "name": "owner",
          "type": "account_name"
        },
        {
          "name": "total_votes",
          "type": "float64"
        },
        {
          "name": "producer_key",
          "type": "public_key"
        },
        {
          "name": "is_active",
          "type": "bool"
        },
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "unpaid_blocks",
          "type": "uint32"
        },
        {
          "name": "last_claim_time",
          "type": "uint64"
        },
        {
          "name": "location",
          "type": "uint16"
        }
      ]
    },
    {
      "name": "regproducer",
      "base": "",
      "fields": [
        {
          "name": "producer",
          "type": "account_name"
        },
        {
          "name": "producer_key",
          "type": "public_key"
        },
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "location",
          "type": "uint16"
        }
      ]
    },
    {
      "name": "unregprod",
      "base": "",
      "fields": [
        {
          "name": "producer",
          "type": "account_name"
        }
      ]
    },
    {
      "name": "setram",
      "base": "",
      "fields": [
        {
          "name": "max_ram_size",
          "type": "uint64"
        }
      ]
    },
    {
      "name": "regproxy",
      "base": "",
      "fields": [
        {
          "name": "proxy",
          "type": "account_name"
        },
        {
          "name": "isproxy",
          "type": "bool"
        }
      ]
    },
    {
      "name": "voteproducer",
      "base": "",
      "fields": [
        {
          "name": "voter",
          "type": "account_name"
        },
        {
          "name": "proxy",
          "type": "account_name"
        },
        {
          "name": "producers",
          "type": "account_name[]"
        }
      ]
    },
    {
      "name": "voter_info",
      "base": "",
      "fields": [
        {
          "name": "owner",
          "type": "account_name"
        },
        {
          "name": "proxy",
          "type": "account_name"
        },
        {
          "name": "producers",
          "type": "account_name[]"
        },
        {
          "name": "staked",
          "type": "int64"
        },
        {
          "name": "last_vote_weight",
          "type": "float64"
        },
        {
          "name": "proxied_vote_weight",
          "type": "float64"
        },
        {
          "name": "is_proxy",
          "type": "bool"
        },
        {
          "name": "deferred_trx_id",
          "type": "uint32"
        },
        {
          "name": "last_unstake_time",
          "type": "time_point_sec"
        },
        {
          "name": "unstaking",
          "type": "asset"
        }
      ]
    },
    {
      "name": "claimrewards",
      "base": "",
      "fields": [
        {
          "name": "owner",
          "type": "account_name"
        }
      ]
    },
    {
      "name": "setpriv",
      "base": "",
      "fields": [
        {
          "name": "account",
          "type": "account_name"
        },
        {
          "name": "is_priv",
          "type": "int8"
        }
      ]
    },
    {
      "name": "rmvproducer",
      "base": "",
      "fields": [
        {
          "name": "producer",
          "type": "account_name"
        }
      ]
    },
    {
      "name": "set_account_limits",
      "base": "",
      "fields": [
        {
          "name": "account",
          "type": "account_name"
        },
        {
          "name": "ram_bytes",
          "type": "int64"
        },
        {
          "name": "net_weight",
          "type": "int64"
        },
        {
          "name": "cpu_weight",
          "type": "int64"
        }
      ]
    },
    {
      "name": "set_global_limits",
      "base": "",
      "fields": [
        {
          "name": "cpu_usec_per_period",
          "type": "int64"
        }
      ]
    },
    {
      "name": "producer_key",
      "base": "",
      "fields": [
        {
          "name": "producer_name",
          "type": "account_name"
        },
        {
          "name": "block_signing_key",
          "type": "public_key"
        }
      ]
    },
    {
      "name": "set_producers",
      "base": "",
      "fields": [
        {
          "name": "schedule",
          "type": "producer_key[]"
        }
      ]
    },
    {
      "name": "require_auth",
      "base": "",
      "fields": [
        {
          "name": "from",
          "type": "account_name"
        }
      ]
    },
    {
      "name": "setparams",
      "base": "",
      "fields": [
        {
          "name": "params",
          "type": "blockchain_parameters"
        }
      ]
    },
    {
      "name": "connector",
      "base": "",
      "fields": [
        {
          "name": "balance",
          "type": "asset"
        },
        {
          "name": "weight",
          "type": "float64"
        }
      ]
    },
    {
      "name": "exchange_state",
      "base": "",
      "fields": [
        {
          "name": "supply",
          "type": "asset"
        },
        {
          "name": "base",
          "type": "connector"
        },
        {
          "name": "quote",
          "type": "connector"
        }
      ]
    }
  ],
  "actions": [
    {
      "name": "newaccount",
      "type": "newaccount",
      "ricardian_contract": "# Action - `{{ newaccount }}`\n\n### Description\n\nThe `{{ newaccount }}` action creates a new account.\n\n### Inputs and Input Types\n\nThe `{{ newaccount }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ newaccount }}` | `{{ creatorVar }}`<br/>`{{ nameVar }}`<br/>`{{ ownerVar }}`<br/>`{{ activeVar }}` | `{{ account_name }}`<br/>`{{ account_name }}`<br/>`{{ authority }}`<br/>`{{ authority }}` |\n\nAs an authorized party I {{ signer }} wish to exercise the authority of {{ creatorVar }} to create a new account on this system named {{ nameVar }} such that the new account's owner public key shall be {{ ownerVar }} and the active public key shall be {{ activeVar }}.\n"
    },
    {
      "name": "setcode",
      "type": "setcode",
      "ricardian_contract": "# Action - `{{ setcode }}`\n\n### Description\n\nThis action updates the code that will run in response to delivered actions. It may be performed by the account upon which the code is being deployed.\n\nBy deploying this code you certify that:\n\n1. the code is not malicious\n2. you are authorized to perform the actions automated by the code\n3. the code is consistant with the ABI deployed and intent of the contract\n4. updates to the code are consistant with the prior code's intent \n"
    },
    {
      "name": "setabi",
      "type": "setabi",
      "ricardian_contract": "# Action - `{{ setabi }}`\n\n### Description\n\nThe intention of the `{{ setabi }}` action is to... \n\n### Inputs and Input Types\n\nThe `{{ setabi }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ setabi }}` | `{{ accountVar }}`<br/>`{{ abiVar }}` | `{{ account_name }}`<br/>`{{ bytes }}` |\n\nAs an authorized party I {{ signer }} wish to UNKNOWN\n"
    },
    {
      "name": "updateauth",
      "type": "updateauth",
      "ricardian_contract": "# Action - `{{ updateauth }}`\n\n### Description\n\nThe `{{ updateauth }}` action... \n\n### Inputs and Input Types\n\nThe `{{ updateauth }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ updateauth }}` | `{{ accountVar }}`<br/>`{{ permissionVar }}`<br/>`{{ parentVar }}`<br/>`{{ authVar }}` | `{{ account_name }}`<br/>`{{ permission_name }}`<br/>`{{ permission_name }}`<br/>`{{ authority }}` |\n\nAs an authorized party I {{ signer }} wish to UNKNOWN\n"
    },
    {
      "name": "deleteauth",
      "type": "deleteauth",
      "ricardian_contract": "# Action - `{{ deleteauth }}`\n\n### Description\n\nThe `{{ deleteauth }}` action... \n\n### Inputs and Input Types\n\nThe `{{ deleteauth }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ deleteauth }}` | `{{ accountVar }}`<br/>`{{ permissionVar }}` | `{{ account_name }}`<br/>`{{ permission_name }}` |\n\nAs an authorized party I {{ signer }} wish to UNKNOWN\n"
    },
    {
      "name": "linkauth",
      "type": "linkauth",
      "ricardian_contract": "# Action - `{{ linkauth }}`\n\n### Description\n\nThe `{{ linkauth }}` action... \n\n### Inputs and Input Types\n\nThe `{{ linkauth }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ linkauth }}` | `{{ accountVar }}`<br/>`{{ codeVar }}`<br/>`{{ typeVar }}`<br/>`{{ requirementVar }}` | `{{ account_name }}`<br/>`{{ account_name }}`<br/>`{{ action_name }}`<br/>`{{ permission_name }}` |\n\nAs an authorized party I {{ signer }} wish to UNKNOWN\n"
    },
    {
      "name": "unlinkauth",
      "type": "unlinkauth",
      "ricardian_contract": "# Action - `{{ unlinkauth }}`\n\n### Description\n\nThe `{{ unlinkauth }}` action... \n\n### Inputs and Input Types\n\nThe `{{ unlinkauth }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ unlinkauth }}` | `{{ accountVar }}`<br/>`{{ codeVar }}`<br/>`{{ typeVar }}` | `{{ account_name }}`<br/>`{{ account_name }}`<br/>`{{ action_name }}` |\n\n\nAs an authorized party I {{ signer }} wish to UNKNOWN\n"
    },
    {
      "name": "canceldelay",
      "type": "canceldelay",
      "ricardian_contract": "# Action - `{{ canceldelay }}`\n\n### Description\n\nThe `{{ canceldelay }}` action cancels an existing delayed transaction.\n\n### Inputs and Input Types\n\nThe `{{ canceldelay }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ canceldelay }}` | `{{ canceling_authVar }}`<br/>`{{ trx_idVar }}` | `{{ permission_level }}`<br/>`{{ transaction_id_type }}` |\n\nAs an authorized party I {{ signer }} wish to invoke the authority of {{ canceling_authVar }} to cancel the transaction with ID {{ trx_idVar }}.\n"
    },
    {
      "name": "onerror",
      "type": "onerror",
      "ricardian_contract": "# Action - `{{ onerror }}`\n\n### Description\n\nThe `{{ onerror }}` action... \n\n### Inputs and Input Types\n\nThe `{{ onerror }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ onerror }}` | `{{ sender_idVar }}`<br/>`{{ sent_trxVar }}` | `{{ uint128 }}`<br/>`{{ bytes }}` |\n\nAs an authorized party I {{ signer }} wish to UNKNOWN\n"
    },
    {
      "name": "buyrambytes",
      "type": "buyrambytes",
      "ricardian_contract": "# Action - `{{ buyrambytes }}`\n\n### Description\n\nThis action will attempt to reserve about {{bytes}} bytes of RAM on behalf of {{receiver}}. \n\n{{buyer}} authorizes this conrtact to transfer sufficient SYS tokens to buy the RAM based upon the current price as determined by the market maker algorithm.\n\n{{buyer}} accepts that a 0.5% fee will be charged on the SYS spent and that the actual RAM received may be slightly less than requested due to the approximations necessary to enable this service.\n{{buyer}} accepts that a 0.5% fee will be charged if and when they sell the RAM received.\n{{buyer}} accepts that rounding errors resulting from limits of computational precision may result in less RAM being allocated.\n{{buyer}} acknowledges that the supply of RAM may be increased at any time up to the limits of off-the-shelf computer equipment and that this may result in RAM selling for less than purchase price.\n{{buyer}} acknowledges that the price of RAM may increase or decrease over time according to supply and demand.\n{{buyer}} acknowledges that RAM is non-transferrable. \n{{buyer}} acknowledges RAM currently in use by their account cannot be sold until it is freed and that freeing RAM may be subject to terms of other contracts.\n\n"
    },
    {
      "name": "buyram",
      "type": "buyram",
      "ricardian_contract": "# Action - `{{ buyram }}`\n\n### Description\n\nThis action will attempt to reserve about {{quant}} worth of RAM on behalf of {{receiver}}. \n\n{{buyer}} authorizes this contract to transfer {{quant}} to buy RAM based upon the current price as determined by the market maker algorithm.\n\n{{buyer}} accepts that a 0.5% fee will be charged on the amount spent and that the actual RAM received may be slightly less than expected due to the approximations necessary to enable this service.\n{{buyer}} accepts that a 0.5% fee will be charged if and when they sell the RAM received.\n{{buyer}} accepts that rounding errors resulting from limits of computational precision may result in less RAM being allocated.\n{{buyer}} acknowledges that the supply of RAM may be increased at any time up to the limits of off-the-shelf computer equipment and that this may result in RAM selling for less than purchase price.\n{{buyer}} acknowledges that the price of RAM may increase or decrease over time according to supply and demand.\n{{buyer}} acknowledges that RAM is non-transferrable. \n{{buyer}} acknowledges RAM currently in use by their account cannot be sold until it is freed and that freeing RAM may be subject to terms of other contracts.\n\n"
    },
    {
      "name": "sellram",
      "type": "sellram",
      "ricardian_contract": "# Action - `{{ sellram }}`\n\n### Description\n\nThe `{{ sellram }}` action sells unused RAM for tokens.\n\n### Inputs and Input Types\n\nThe `{{ sellram }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ sellram }}` | `{{ accountVar }}`<br/>`{{ bytesVar }}` | `{{ account_name }}`<br/>`{{ uint64 }}` |\n\nAs an authorized party I {{ signer }} wish to sell {{ bytesVar }} of RAM from account {{ accountVar }}. \n"
    },
    {
      "name": "delegatebw",
      "type": "delegatebw",
      "ricardian_contract": "# eosio.system delegatebw\n\n## delegatebw\n    (account_name-from; \n     account_name-to; \n     asset-stake_net_quantity; \n     asset-stake_cpu_quantity; \n     bool:transfer)\n\n_Intent: stake tokens for bandwidth and/or CPU and optionally transfer ownership_\n\nAs an authorized party I {{ signer }} wish to stake {{ asset-stake_cpu_quantity }} for CPU and {{ asset-stake_net_quantity }} for bandwidth from the liquid tokens of {{ account_name-from }} for the use of delegatee {{ account_name-to }}. \n  \n    {{if bool:transfer }}\n    \nIt is {{ bool:transfer }} that I wish these tokens to become immediately owned by the delegatee.\n \n    {{/if}}\n\nAs signer I stipulate that, if I am not the beneficial owner of these tokens, I have proof that I\u2019ve been authorized to take this action by their beneficial owner(s). \n"
    },
    {
      "name": "undelegatebw",
      "type": "undelegatebw",
      "ricardian_contract": "# eosio.system undelegatebw\n\n## undelegatebw \n    (account_name-from; \n     account_name-to; \n     asset-unstake_net_quantity; \n     asset-unstake_cpu_quantity)\n\n_Intent: unstake tokens from bandwidth_\n\nAs an authorized party I {{ signer }} wish to unstake {{ asset-unstake_cpu_quantity }} from CPU and {{ asset-unstake_net_quantity }} from bandwidth from the tokens owned by {{ account_name-from }} previously delegated for the use of delegatee {{ account_name-to }}. \n\nIf I as signer am not the beneficial owner of these tokens I stipulate I have proof that I\u2019ve been authorized to take this action by their beneficial owner(s). \n"
    },
    {
      "name": "refund",
      "type": "refund",
      "ricardian_contract": "# Action - `{{ refund }}`\n\n### Description\n\nThe intent of the `{{ refund }}` action is to return previously unstaked tokens to an account after the unstaking period has elapsed. \n\n### Input and Input Type\n\nThe `{{ refund }}` action requires the following `input` and `input type`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ refund }}` | `{{ ownerVar }}` | `{{ account_name }}` |\n\n\nAs an authorized party I {{ signer }} wish to have the unstaked tokens of {{ ownerVar }} returned.\n"
    },
    {
      "name": "regproducer",
      "type": "regproducer",
      "ricardian_contract": "# eosio.system regproducer\n\nI, {{producer}}, hereby nominate myself for consideration as an elected block producer.\n\nIf {{producer}} is selected to produce blocks by the eosio contract, I will sign blocks with {{producer_key}} and I hereby attest that I will keep this key secret and secure.\n\nIf {{producer}} is unable to perform obligations under this contract I will resign my position by resubmitting this contract with the null producer key.\n\nI acknowledge that a block is 'objectively valid' if it conforms to the deterministic blockchain rules in force at the time of its creation, and is 'objectively invalid' if it fails to conform to those rules.\n\n{{producer}} hereby agrees to only use {{producer_key}} to sign messages under the following scenarios:\nproposing an objectively valid block at the time appointed by the block scheduling algorithm\npre-confirming a block produced by another producer in the schedule when I find said block objectively valid\nconfirming a block for which {{producer}} has received 2/3+ pre-confirmation messages from other producers\n\nI hereby accept liability for any and all provable damages that result from my:\nsigning two different block proposals with the same timestamp with {{producer_key}\nsigning two different block proposals with the same block number with {{producer_key}\nsigning any block proposal which builds off of an objectively invalid block\nsigning a pre-confirmation for an objectively invalid block\nsigning a confirmation for a block for which I do not possess pre-confirmation messages from 2/3+ other producers\n\nI hereby agree that double-signing for a timestamp or block number in concert with 2 or more other producers shall automatically be deemed malicious and subject to a fine equal to the past year of compensation received and imediate disqualification from being a producer, and other damages. An exception may be made if {{producer}} can demonstrate that the double-signing occured due to a bug in the reference software; the burden of proof is on {{producer}}.\n\nI hereby agree not to interfere with the producer election process. I agree to process all producer election transactions that occur in blocks I create, to sign all objectively valid blocks I create that contain election transactions, and to sign all pre-confirmations and confirmations necessary to facilitate transfer of control to the next set of producers as determined by the system contract.\n\nI hereby acknowledge that 2/3+ other elected producers may vote to disqualify {{producer}} in the event {{producer}} is unable to produce blocks or is unable to be reached, according to criteria agreed to among producers.\n\nIf {{producer}} qualifies for and chooses to collect compensation due to votes received, {{producer}} will provide a public endpoint allowing at least 100 peers to maintain synchronization with the blockchain and/or submit transactions to be included. {{producer}} shall maintain at least 1 validating node with full state and signature checking and shall report any objectively invalid blocks produced by the active block producers. Reporting shall be via a method to be agreed to among producers, said method and reports to be made public.\n\nThe community agrees to allow {{producer}} to authenticate peers as necessary to prevent abuse and denial of service attacks; however, {{producer}} agrees not to discriminate against non-abusive peers.\n\nI agree to process transactions on a FIFO best-effort basis and to honestly bill transactions for measured execution time.\n\nI {{producer}} agree not to manipulate the contents of blocks in order to derive profit from:\nthe order in which transactions are included\nthe hash of the block that is produced\n\nI, {{producer}}, hereby agree to disclose and attest under penalty of perjury all ultimate beneficial owners of my company who own more than 10% and all direct shareholders.\n\nI, {{producer}}, hereby agree to cooperate with other block producers to carry out our respective and mutual obligations under this agreement, including but not limited to maintaining network stability and a valid blockchain.\n\nI, {{producer}}, agree to maintain a website hosted at {{url}} which contains up-to-date information on all disclosures required by this contract.\n\nI, {{producer}}, agree to set {{location}} such that {{producer}} is scheduled with minimal latency between my previous and next peer.\n\nI, {{producer}}, agree to maintain time synchronization within 10 ms of global atomic clock time, using a method agreed to among producers.\n\nI, {{producer}}, agree not to produce blocks before my scheduled time unless I have received all blocks produced by the prior producer.\n\nI, {{producer}}, agree not to publish blocks with timestamps more than 500ms in the future unless the prior block is more than 75% full by either CPU or network bandwidth metrics.\n\nI, {{producer}}, agree not to set the RAM supply to more RAM than my nodes contain and to resign if I am unable to provide the RAM approved by 2/3+ producers, as shown in the system parameters.\n"
    },
    {
      "name": "setram",
      "type": "setram",
      "ricardian_contract": "# Action - `{{ setram }}`\n\n### Description\n\nThis action sets the total RAM that may be allocated for use by accounts. It may only increase.\n\nOnly the controller of this contract may update the RAM availablity. If the owner is a multi-sig collective, the\nparties to the multi-sig each certify that off-the-shelf machines exist capable of supporting the available RAM.\n"
    },
    {
      "name": "bidname",
      "type": "bidname",
      "ricardian_contract": "# Action - `{{ bidname }}`\n\n### Description\n\nThe `{{ bidname }}` action places a bid on a premium account name, in the knowledge that the high bid will purchase the name.\n\n### Inputs and Input Types\n\nThe `{{ bidname }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ bidname }}` | `{{ bidderVar }}`<br/>`{{ newnameVar }}`<br/>`{{ bidVar }}` | `{{ account_name }}`<br/>`{{ account_name }}`<br/>`{{ asset }}` |\n\nAs an authorized party I {{ signer }} wish to bid on behalf of {{ bidderVar }} the amount of {{ bidVar }} toward purchase of the account name {{ newnameVar }}.\n"
    },
    {
      "name": "unregprod",
      "type": "unregprod",
      "ricardian_contract": "# Action - `{{ unregprod }}`\n\n### Description\n\nThe `{{ unregprod }}` action unregisters a previously registered block producer candidate.\n\n### Input and Input Type\n\nThe `{{ unregprod }}` action requires the following `input` and `input type`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ unregprod }}` | `{{ producerVar }}` | `{{ account_name }}` |\n\nAs an authorized party I {{ signer }} wish to unregister the block producer candidate {{ producerVar }}, rendering that candidate no longer able to receive votes.\n"
    },
    {
      "name": "regproxy",
      "type": "regproxy",
      "ricardian_contract": "# Action - `{{ regproxy }}`\n\n### Description\n\nThe `{{ regproxy }}` action... \n\n### Inputs and Input Types\n\nThe `{{ regproxy }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ regproxy }}` | `{{ proxyVar }}`<br/>`{{ isproxyVar }}` | `{{ account_name }}`<br/>`{{ bool }}` |\n\nAs an authorized party I {{ signer }} wish to UNKNOWN\n"
    },
    {
      "name": "voteproducer",
      "type": "voteproducer",
      "ricardian_contract": "# Ricardian Contract for *voteproducer*\n\nThis Ricardian contract for the system command *voteproducer* is legally binding and can be used in the event of a dispute.\n\n\n## VOTEPRODUCER (voter; array:producers)\n\n_Intent: cast a valid vote for up to 30 BP candidates_\n\nAs an authorized party I {{ signer }} wish to vote on behalf of {{ voter }} in favor of the block producer candidates {{ array:producers }} with a voting weight equal to all tokens currently owned by {{ voter }} and staked for CPU or bandwidth. \n\nIf I am not the beneficial owner of these shares I stipulate I have proof that I\u2019ve been authorized to vote these shares by their beneficial owner(s). \n\nI stipulate I have not and will not accept anything of value in exchange for these votes, on penalty of confiscation of these tokens, and other penalties. \n\nI acknowledge that using any system of automatic voting, re-voting, or vote refreshing, or allowing such a system to be used on my behalf or on behalf of another, is forbidden and doing so violates this contract.\n\nAll disputes arising from this contract shall be resolved in the EOS Core Arbitration Forum. \n"
    },
    {
      "name": "claimrewards",
      "type": "claimrewards",
      "ricardian_contract": "# Action - `{{ claimrewards }}`\n\n### Description\n\nThe `{{ claimrewards }}` action allows a block producer (active or standby) to claim the system rewards due them for producing blocks and receiving votes.\n\n### Input and Input Type\n\nThe `{{ claimrewards }}` action requires the following `input` and `input type`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ claimrewards }}` | `{{ ownerVar }}` | `{{ account_name }}` |\n\nAs an authorized party I {{ signer }} wish to have the rewards earned by {{ ownerVar }} deposited into their (my)  account.\n"
    },
    {
      "name": "setpriv",
      "type": "setpriv",
      "ricardian_contract": "# Action - `{{ setpriv }}`\n\n### Description\n\nThe intention of the `{{ setpriv }}` action is to ...\n\n### Inputs and Input Types\n\nThe `{{ setpriv }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ setpriv }}` | `{{ accountVar }}`<br/>`{{ is_privVar }}` | `{{ account_name }}`<br/>`{{ int8 }}` |\n\nAs an authorized party I {{ signer }} wish to UNKNOWN\n"
    },
    {
      "name": "rmvproducer",
      "type": "rmvproducer",
      "ricardian_contract": "# Action - `{{ rmvproducer }}`\n\n### Description\n\nThis action will remove a producer from the schedule. Should be called by other scheduled producers only sparingly and for the purpose of maintaining chain integrity and network stability. \n\nProducers who call this without appropriate justification, such as a mutually agreed SLA or other objective criteria, can be liable for lost revenue and lost reputation suffered by the target of this call.\n"
    },
    {
      "name": "setalimits",
      "type": "set_account_limits",
      "ricardian_contract": "# Action - `{{ setalimits }}`\n\n### Description\n\nThe `{{ setalimits }}` action... \n\n### Inputs and Input Types\n\nThe `{{ setalimits }}` action requires the following `inputs` and `input types`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ setalimits }}` | `{{ accountVar }}`<br/>`{{ ram_bytesVar }}`<br/>`{{ net_weightVar }}`<br/>`{{ cpu_weightVar }}` | `{{ account_name }}`<br/>`{{ int64 }}`<br/>`{{ int64 }}`<br/>`{{ int64 }}` |\n\n\nAs an authorized party I {{ signer }} wish to UNKNOWN\n"
    },
    {
      "name": "setglimits",
      "type": "set_global_limits",
      "ricardian_contract": "# Action - `{{ setglimits }}`\n\n### Description\n\nThe intention of the `{{ setglimits }}` action is to ... \n\n### Input and Input Type\n\nThe `{{ setglimits }}` action requires the following `input` and `input type`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ setglimits }}` | `{{ cpu_usec_per_periodVar }}` | `{{ int64 }}` |\n\nAs an authorized party I {{ signer }} wish to UNKNOWN\n"
    },
    {
      "name": "setprods",
      "type": "set_producers",
      "ricardian_contract": "# Action - `{{ setprods }}`\n\n### Description\n\nThe `{{ setprods }}` action creates a new schedule of active producers, who will produce blocks in the order given.\n\n### Input and Input Type\n\nThe `{{ setprods }}` action requires the following `input` and `input type`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ setprods }}` | `{{ scheduleVar }}` | `{{ producer_key[] }}` |\n\nTHIS IS A SYSTEM COMMAND NOT AVAILABLE FOR DIRECT ACCESS BY USERS.\n\n\nAs an authorized party I {{ signer }} wish to set the rotation of producers to be {{ scheduleVar }}.\n"
    },
    {
      "name": "reqauth",
      "type": "require_auth",
      "ricardian_contract": "# Action - `{{ reqauth }}`\n\n### Description\n\nThe `{{ reqauth }}` action... \n\n### Input and Input Type\n\nThe `{{ reqauth }}` action requires the following `input` and `input type`:\n\n| Action | Input | Input Type |\n|:--|:--|:--|\n| `{{ reqauth }}` | `{{ fromVar }}` | `{{ account_name }}` |\n\nAs an authorized party I {{ signer }} wish to UNKNOWN\n"
    },
    {
      "name": "setparams",
      "type": "setparams",
      "ricardian_contract": "# Action - `{{ setparams }}`\n\n### Description\n\nThis action will set system parameters.\n"
    }
  ],
  "tables": [
    {
      "name": "producers",
      "type": "producer_info",
      "index_type": "i64",
      "key_names": [
        "owner"
      ],
      "key_types": [
        "uint64"
      ]
    },
    {
      "name": "global",
      "type": "eosio_global_state",
      "index_type": "i64",
      "key_names": [],
      "key_types": []
    },
    {
      "name": "voters",
      "type": "voter_info",
      "index_type": "i64",
      "key_names": [
        "owner"
      ],
      "key_types": [
        "account_name"
      ]
    },
    {
      "name": "userres",
      "type": "user_resources",
      "index_type": "i64",
      "key_names": [
        "owner"
      ],
      "key_types": [
        "uint64"
      ]
    },
    {
      "name": "delband",
      "type": "delegated_bandwidth",
      "index_type": "i64",
      "key_names": [
        "to"
      ],
      "key_types": [
        "uint64"
      ]
    },
    {
      "name": "rammarket",
      "type": "exchange_state",
      "index_type": "i64",
      "key_names": [
        "supply"
      ],
      "key_types": [
        "uint64"
      ]
    },
    {
      "name": "refunds",
      "type": "refund_request",
      "index_type": "i64",
      "key_names": [
        "owner"
      ],
      "key_types": [
        "uint64"
      ]
    }
  ],
  "ricardian_clauses": [
    {
      "id": "constitution",
      "body": "This Constitution is a multi-party contract entered into by the Members by virtue of their use of this blockchain.\n\n# Article I - No Initiation of Violence\nMembers shall not initiate violence or the threat of violence against another Member. Lawful prosecution of crimes with the goal of preserving life, liberty and property does not constitute initiation of violence.\n\n# Article II - No Perjury\nMembers shall be liable for losses caused by false or misleading attestations and shall forfeit any profit gained thereby.\n\n# Article III - Rights\nThe Members grant the right of contract and of private property to each other, therefore no property shall change hands except with the consent of the owner, by a valid Arbitrator\u2019s order, or via community referendum. This Constitution creates no positive rights for or between any Members.\n\n# Article IV - No Vote Buying\nNo Member shall offer nor accept anything of value in exchange for a vote of any type, nor shall any Member unduly influence the vote of another.\n\n# Article V - No Fiduciary\nNo Member nor EOS token holder shall have fiduciary responsibility to support the value of the EOS token. The Members do not authorize anyone to hold assets, borrow, nor contract on behalf of EOS token holders collectively. This blockchain has no owners, managers or fiduciaries; therefore, no Member shall have beneficial interest in more than 10% of the EOS token supply.\n\n# Article VI - Restitution\nEach Member agrees that penalties for breach of contract may include, but are not limited to, fines, loss of account, and other restitution.\n\n# Article VII - Open Source\nEach Member who makes available a smart contract on this blockchain shall be a Developer. Each Developer shall offer their smart contracts via a free and open source license, and each smart contract shall be documented with a Ricardian Contract stating the intent of all parties and naming the Arbitration Forum that will resolve disputes arising from that contract.\n\n# Article VIII - Language\nMulti-lingual contracts must specify one prevailing language in case of dispute and the author of any translation shall be liable for losses due to their false, misleading, or ambiguous attested translations.\n\n# Article IX - Dispute Resolution\nAll disputes arising out of or in connection with this Constitution shall be finally settled under the Rules of Arbitration of the International Chamber of Commerce by one or more arbitrators appointed in accordance with the said Rules.\n\n# Article X - Choice of Law\nChoice of law for disputes shall be, in order of precedence, this Constitution and the Maxims of Equity.\n\n# Article XI - Amending\nThis Constitution and its subordinate documents shall not be amended except by a vote of the token holders with no less than 15% vote participation among tokens and no fewer than 10% more Yes than No votes, sustained for 30 continuous days within a 120 day period.\n\n# Article XII - Publishing\nMembers may only publish information to the Blockchain that is within their right to publish. Furthermore, Members voluntarily consent for all Members to permanently and irrevocably retain a copy, analyze, and distribute all broadcast transactions and derivative information.\n\n# Article XIII - Informed Consent\nAll service providers who produce tools to facilitate the construction and signing of transactions on behalf of other Members shall present to said other Members the full Ricardian contract terms of this Constitution and other referenced contracts. Service providers shall be liable for losses resulting from failure to disclose the full Ricardian contract terms to users.\n\n# Article XIV - Severability\nIf any part of this Constitution is declared unenforceable or invalid, the remainder will continue to be valid and enforceable.\n\n# Article XV - Termination of Agreement\nA Member is automatically released from all revocable obligations under this Constitution 3 years after the last transaction signed by that Member is incorporated into the blockchain. After 3 years of inactivity an account may be put up for auction and the proceeds distributed to all Members according to the system contract provisions then in effect for such redistribution.\n\n# Article XVI - Developer Liability\nMembers agree to hold software developers harmless for unintentional mistakes made in the expression of contractual intent, whether or not said mistakes were due to actual or perceived negligence.\n\n# Article XVII - Consideration\nAll rights and obligations under this Constitution are mutual and reciprocal and of equally significant value and cost to all parties.\n\n# Article XVIII - Acceptance\nA contract is deemed accepted when a member signs a transaction which incorporates a TAPOS proof of a block whose implied state incorporates an ABI of said contract and said transaction is incorporated into the blockchain.\n\n# Article XIX - Counterparts\nThis Constitution may be executed in any number of counterparts, each of which when executed and delivered shall constitute a duplicate original, but all counterparts together shall constitute a single agreement.\n\n# Article XX - Interim Constitution\nThis constitution is interim and is intended to remain in effect until a permanent constitution is written and ratified in a referendum.\n"
    }
  ],
  "abi_extensions": []
}